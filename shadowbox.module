<?php
// $Id: shadowbox.module,v 1.1.2.12.2.28.2.8 2009/09/17 19:09:54 psynaptic Exp $

/**
 * @file
 * Shadowbox, a JavaScript media viewer application for displaying content in a
 * modal dialogue.
 */

/**
 * Implementation of hook_help().
 */
function shadowbox_help($path, $arg) {
  switch ($path) {
    case 'admin/help#shadowbox':
      $output = '<p>'. t('Shadowbox is a modal media viewer application akin to !lightbox and !thickbox. You can use it to display images, movies, and other web content in a window that is overlaid on top of the originating page.', array('!lightbox' => l('lightbox2', 'http://drupal.org/project/lightbox2', array('absolute' => TRUE)), '!thickbox' => l('thickbox', 'http://drupal.org/project/thickbox', array('absolute' => TRUE)))) .'</p>';
      $output .= '<h3>'. t('From the author of Shadowbox:') .'</h3>';
      $output .= '<blockquote>'. t('Shadowbox is an online media viewer application that supports all of the web\'s most popular media publishing formats. Shadowbox is written entirely in JavaScript and CSS and is highly customizable. Using Shadowbox, website authors can showcase a wide assortment of media in all major browsers without navigating users away from the linking page.') .'</blockquote>';
      $output .= '<h3>'. t('Usage:') .'</h3>';
      $output .= '<p>'. t('This module has !global_settings that work on a site-wide basis.', array('!global_settings' => l('global settings', 'admin/settings/shadowbox'))) .'</p>';
      $output .= '<p>'. t('Integration with !imagefield 2, !imagecache 2 and !views is provided and the same formatters found in lightbox2 are available in this module.', array('!imagecache' => l('imagecache', 'http://drupal.org/project/imagecache', array('absolute' => TRUE)), '!imagefield' => l('imagefield', 'http://drupal.org/project/imagefield', array('absolute' => TRUE)), '!views' => l('views', 'http://drupal.org/project/views', array('absolute' => TRUE)))) .'</p>';
      $output .= '<p>'. t('To manually enable Shadowbox for a link you must add a <strong><code>rel</code></strong> attribute with a value of <strong><code>shadowbox</code></strong> (for compatibility with lightbox2 you can also use a value of <strong><code>lightbox</code></strong>).') .'</p>';
      $output .= '<h4>'. t('Single media item:') .'</h4>';
      $output .= '<p>'. t('The important thing to note here is the <code>rel</code> attribute. This tells Shadowbox you wish to activate it for this link. The <code>title</code> attribute is optional and can be used to give a caption to the item.') .'</p>';
      $output .= '<strong>'. t('Example:') .'</strong>';
      $output .= '<p>'. t('<code><pre>&lt;a href=&quot;image1.jpg&quot; rel=&quot;shadowbox&quot; title=&quot;Caption&quot;&gt;Image&lt;/a&gt;</pre></code>') .'</p>';
      $output .= '<h4>'. t('Gallery:') .'</h4>';
      $output .= '<p>'. t('Media of mixed type can be grouped into a gallery using <code>shadowbox[name]</code> where <code>name</code> is any value you wish to use for the current grouping of media. The value of <code>name</code> is only used internally by Shadowbox and won\'t be shown to the user.') .'</p>';
      $output .= '<strong>'. t('Example:') .'</strong>';
      $output .= '<p>'. t('<code><pre>&lt;a href=&quot;image1.jpg&quot; rel=&quot;shadowbox[gallery]&quot; title=&quot;Caption 1&quot;&gt;Image 1&lt;/a&gt;
&lt;a href=&quot;image2.jpg&quot; rel=&quot;shadowbox[gallery]&quot; title=&quot;Caption 2&quot;&gt;Image 2&lt;/a&gt;
&lt;a href=&quot;image3.jpg&quot; rel=&quot;shadowbox[gallery]&quot; title=&quot;Caption 3&quot;&gt;Image 3&lt;/a&gt;</pre></code>') .'</p>';
      $output .= '<h4>'. t('iFrame:') .'</h4>';
      $output .= '<p>'. t('A useful feature of Shadowbox is the ability to open another website directly on top of the current page.') .'</p>';
      $output .= '<strong>'. t('Example:') .'</strong>';
      $output .= '<p>'. t('<code><pre>&lt;a href=&quot;http://google.com&quot; rel=&quot;shadowbox&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt;</pre></code>') .'<p>';
      $output .= '<h4>'. t('Advanced usage:') .'</h4>';
      $output .= '<p>'. t('Shadowbox allows you to specify options on a per-instance basis by using a JSON-formatted parameter. More information on this feature can be found on the !shadowbox_usage', array('!shadowbox_usage' => l('Shadowbox usage page', 'http://mjijackson.com/shadowbox/doc/usage.html#markup', array('absolute' => TRUE)))) .'</p>';
      $output .= '<strong>'. t('Example:') .'</strong>';
      $output .= '<p>'. t('<code><pre>&lt;a href=&quot;http://google.com&quot; rel=&quot;shadowbox;width=740;height=380;
  options={overlayOpacity:1,resizeDuration:0.2};&quot;&gt;Google&lt;/a&gt;</pre></code>') .'</p>';
      return $output;

    case 'admin/settings/shadowbox':
      return '<p>'. t('This page provides access to the Shadowbox settings. The settings here work globally so any changes made here will affect Shadowbox for the entire site.') .'</p>';
  }
}

/**
 * Implementation of hook_perm().
 */
function shadowbox_perm() {
  return array('administer shadowbox');
}

/**
 * Implementation of hook_menu().
 */
function shadowbox_menu() {
  $items = array();

  $items['admin/settings/shadowbox'] = array(
    'title' => 'Shadowbox',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shadowbox_global_settings'),
    'access arguments' => array('administer shadowbox'),
    'description' => 'Configure the settings for Shadowbox.',
    'file' => 'shadowbox.admin.inc',
  );
  $items['admin/settings/shadowbox/global'] = array(
    'title' => 'Global',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shadowbox_global_settings'),
    'access arguments' => array('administer shadowbox'),
    'description' => 'Configure the settings for Shadowbox.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'file' => 'shadowbox.admin.inc',
  );
  $items['admin/settings/shadowbox/automatic'] = array(
    'title' => 'Auto image handling',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shadowbox_automatic_settings'),
    'access arguments' => array('administer shadowbox'),
    'description' => 'Configure the Shadowbox automatic image handling settings.',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'shadowbox.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_init().
 */
function shadowbox_init() {
  shadowbox_construct_header();
}

/**
 * Implementation of hook_field_formatter_info().
 *
 * Add certain shadowbox+imagecache formatters to CCK image fields if the
 * imagefield.module and the imagecache.module exist.
 */
function shadowbox_field_formatter_info() {
  $formatters = array();

  if (module_exists('imagecache') && module_exists('imagefield')) {
    $presets = shadowbox_get_imagecache_presets(TRUE);

    foreach ($presets as $preset) {
      $formatters['shadowbox___original___'. $preset] = array(
        'label' => 'Shadowbox: original to '. $preset,
        'field types' => array('filefield'),
      );
      $formatters['shadowbox___'. $preset .'___original'] = array(
        'label' => 'Shadowbox: '. $preset .' to original',
        'field types' => array('filefield'),
      );
      $formatters['shadowbox_gallery___original___'. $preset] = array(
        'label' => 'Shadowbox Gallery (page): original to '. $preset,
        'field types' => array('filefield'),
      );
      $formatters['shadowbox_gallery___'. $preset .'___original'] = array(
        'label' => 'Shadowbox Gallery (page): '. $preset .' to original',
        'field types' => array('filefield'),
      );
      $formatters['shadowbox_gallery_field___original___'. $preset] = array(
        'label' => 'Shadowbox Gallery (field): original to '. $preset,
        'field types' => array('filefield'),
      );
      $formatters['shadowbox_gallery_field___'. $preset .'___original'] = array(
        'label' => 'Shadowbox Gallery (field): '. $preset .' to original',
        'field types' => array('filefield'),
      );
      $formatters['shadowbox_gallery_nid___original___'. $preset] = array(
        'label' => 'Shadowbox Gallery (nid): original to '. $preset,
        'field types' => array('filefield'),
      );
      $formatters['shadowbox_gallery_nid___'. $preset .'___original'] = array(
        'label' => 'Shadowbox Gallery (nid): '. $preset .' to original',
        'field types' => array('filefield'),
      );

      foreach ($presets as $preset_alt) {

        if ($preset != $preset_alt) {
          $formatters['shadowbox___'. $preset .'___'. $preset_alt] = array(
            'label' => 'Shadowbox: '. $preset .' to '. $preset_alt,
            'field types' => array('filefield'),
          );
          $formatters['shadowbox_gallery___'. $preset .'___'. $preset_alt] = array(
            'label' => 'Shadowbox Gallery (page): '. $preset .' to '. $preset_alt,
            'field types' => array('filefield'),
          );
          $formatters['shadowbox_gallery_field___'. $preset .'___'. $preset_alt] = array(
            'label' => 'Shadowbox Gallery (field): '. $preset .' to '. $preset_alt,
            'field types' => array('filefield'),
          );
          $formatters['shadowbox_gallery_nid___'. $preset .'___'. $preset_alt] = array(
            'label' => 'Shadowbox Gallery (nid): '. $preset .' to '. $preset_alt,
            'field types' => array('filefield'),
          );
        }
      }
    }
  }

  if (is_array($formatters)) {
    asort($formatters);
  }

  return $formatters;
}

/**
 * Implementation of hook_theme().
 */
function shadowbox_theme() {

  $theme = array(
    'imagefield_image_imagecache_shadowbox' => array(
      'arguments' => array(
        'view_preset' => NULL,
        'field' => NULL,
        'item' => NULL,
        'attributes' => array(),
        'gallery' => NULL,
      ),
    ),
    'shadowbox_image' => array(
      'arguments' => array(
        'alt' => '',
        'title' => '',
        'attributes' => array(),
      ),
    ),
  );

  if (module_exists('imagecache') && module_exists('imagefield')) {
    $presets = shadowbox_get_imagecache_presets();

    $formatter = array(
      'arguments' => array('element' => NULL),
      'function' => 'theme_shadowbox_formatter_imagefield',
    );

    foreach ($presets as $preset) {
      $source = $preset['presetname'];
      $theme['shadowbox_formatter_shadowbox___original___'. $source] = $formatter;
      $theme['shadowbox_formatter_shadowbox___'. $source .'___original'] = $formatter;
      $theme['shadowbox_formatter_shadowbox_gallery___original___'. $source] = $formatter;
      $theme['shadowbox_formatter_shadowbox_gallery___'. $source .'___original'] = $formatter;
      $theme['shadowbox_formatter_shadowbox_gallery_field___original___'. $source] = $formatter;
      $theme['shadowbox_formatter_shadowbox_gallery_field___'. $source .'___original'] = $formatter;
      $theme['shadowbox_formatter_shadowbox_gallery_nid___original___'. $source] = $formatter;
      $theme['shadowbox_formatter_shadowbox_gallery_nid___'. $source .'___original'] = $formatter;

      foreach ($presets as $preset) {
        $destination = $preset['presetname'];

        if ($source != $destination) {
          $theme['shadowbox_formatter_shadowbox___'. $source .'___'. $destination] = $formatter;
          $theme['shadowbox_formatter_shadowbox_gallery___'. $source .'___'. $destination] = $formatter;
          $theme['shadowbox_formatter_shadowbox_gallery_field___'. $source .'___'. $destination] = $formatter;
          $theme['shadowbox_formatter_shadowbox_gallery_nid___'. $source .'___'. $destination] = $formatter;
        }
      }
    }
  }
  return $theme;
}

/**
 * Theme function for displaying the shadowbox trigger image in an imagefield.
 */
function theme_shadowbox_image($path, $alt = '', $title = '', $attributes = NULL) {
  $attributes = drupal_attributes($attributes);
  $url = file_create_url($path);
  $alt = check_plain($alt);
  $title = check_plain($title);

  $image = '<img src="'. $url .'" alt="'.  $alt .'" title="'. $title .'" '. $attributes .' />';
  return $image;
}

/**
 * Implementation of theme_imagefield_image_imagecache_shadowbox().
 */
function theme_imagefield_image_imagecache_shadowbox($source, $destination, $item, $gallery_id = '') {
  $filepath = $item['filepath'];
  $alt = $item['data']['alt'];
  $title = $item['data']['title'];
  $rel = ($gallery_id != '') ? 'shadowbox['. $gallery_id .']' : 'shadowbox';
  $link_attributes = array(
    'rel' => $rel,
    'title' => $title,
  );
  $options = array(
    'attributes' => $link_attributes,
    'html' => TRUE,
  );

  if ($filepath == '') {
    return;
  }

  if ($source == 'original') {
    $image = theme('shadowbox_image', $filepath, $alt, $title);
  }
  else {
    $image = theme('imagecache', $source, $filepath, $alt, $title);
  }

  if ($destination == 'original') {
    $output = l($image, file_create_url($filepath), $options);
  }
  else {
    $output = l($image, shadowbox_imagecache_create_url($destination, $filepath), $options);
  }

  $wrapper_classes = ($gallery_id != '') ? 'sb-image sb-gallery sb-gallery-'. $gallery_id : 'sb-image sb-indivdual';
  $output = '<div class="'. $wrapper_classes .'">'. $output .'</div>';

  return $output;
}

/**
 * Implementation of theme_shadowbox_formatter_imagefield().
 *
 * Note: Fields with multiple values are processed during a single invocation of this function.
 */
function theme_shadowbox_formatter_imagefield($element) {
  if (!module_exists('imagefield') || !module_exists('imagecache')) {
    return;
  }

  $field_name = $element['#field_name'];
  $item = $element['#item'];
  $formatter = $element['#formatter'];
  $node = node_load($element['#node']->nid);

  list($theme, $source, $destination) = explode('___', $formatter, 3);

  switch ($theme) {
    case 'shadowbox_gallery':
      $gallery_id = 'gallery';
      break;
    case 'shadowbox_gallery_field':
      $gallery_id = $field_name;
      break;
    case 'shadowbox_gallery_nid':
      $gallery_id = 'nid-'. $element['#node']->nid;
      break;
  }

  $presets = shadowbox_get_imagecache_presets();
  foreach ($presets as $preset) {
    $presets[] = $preset['presetname'];
  }

  if ($source == 'original' || in_array($source, $presets)) {
    $output = theme('imagefield_image_imagecache_shadowbox', $source, $destination, $item, $gallery_id);
  }

  return $output;
}

/**
 * Implementation of the imagecache_create_url() function for integration with
 * imagecache module versions prior to imagecache 2.
 */
function shadowbox_imagecache_create_url($preset, $filepath) {
  if (function_exists('imagecache_create_url')) {
    return imagecache_create_url($preset, $filepath);
  }
  else {
    $path = _imagecache_strip_file_directory($filepath);
    return file_create_url(file_directory_path() .'/imagecache/'. $preset .'/'. $path);
  }
}

/**
 * Build the Shadowbox header by adding the necessary CSS and JS files.
 */
function shadowbox_construct_header() {
  global $language;

  $module_path = drupal_get_path('module', 'shadowbox');
  $shadowbox_path = 'sites/all/plugins/shadowbox';
  $shadowbox_location = variable_get('shadowbox_location', $shadowbox_path);

  $images = variable_get('shadowbox_supported_images', shadowbox_get_types('image'));
  $swf = variable_get('shadowbox_supported_swf', shadowbox_get_types('swf'));
  $flv = variable_get('shadowbox_supported_flv', shadowbox_get_types('flv'));
  $quicktime = variable_get('shadowbox_supported_quicktime', shadowbox_get_types('quicktime'));
  $wmp = variable_get('shadowbox_supported_wmp', shadowbox_get_types('wmp'));
  $qtwmp = variable_get('shadowbox_supported_qtwmp', shadowbox_get_types('qtwmp'));
  $iframe = variable_get('shadowbox_supported_iframe', shadowbox_get_types('iframe'));

  $image_support = array_filter($images);
  $swf_support = array_filter($swf);
  $flv_support = array_filter($flv);
  $quicktime_support = array_filter($quicktime);
  $wmp_support = array_filter($wmp);
  $qtwmp_support = array_filter($qtwmp);
  $iframe_support = array_filter($iframe);

  if (shadowbox_active() && variable_get('shadowbox_enabled', TRUE)) {
    drupal_add_js($shadowbox_location .'/shadowbox.js');
    drupal_add_js($shadowbox_location .'/adapters/shadowbox-jquery.js');
    drupal_add_js($module_path .'/shadowbox_auto.js');
    drupal_add_css($shadowbox_location .'/shadowbox.css');
    // If language is set to xx (i.e. when using string overrides module) default to English.
    if ($language->language == 'xx') {
      $language->language = 'en';
    }
    $language_file = $shadowbox_location .'/languages/shadowbox-'. $language->language .'.js';
    if (file_exists($language_file)) {
      drupal_add_js($language_file);
    }
    else {
      drupal_set_message(t('Shadowbox is not properly installed. Please check the !status', array('!status' => l('status report', 'admin/reports/status'))), 'warning');
    }
    if (!empty($image_support)) {
      drupal_add_js($shadowbox_location .'/players/shadowbox-img.js');
    }
    if (!empty($swf_support)) {
      drupal_add_js($shadowbox_location .'/players/shadowbox-swf.js');
    }
    if (!empty($flv_support)) {
      drupal_add_js($shadowbox_location .'/players/shadowbox-flv.js');
    }
    if (!empty($quicktime_support)) {
      drupal_add_js($shadowbox_location .'/players/shadowbox-qt.js');
    }
    if ((!empty($wmp_support)) || (!empty($qtwmp_support))) {
      drupal_add_js($shadowbox_location .'/players/shadowbox-wmp.js');
    }
    if (!empty($iframe_support)) {
      drupal_add_js($shadowbox_location .'/players/shadowbox-html.js');
      drupal_add_js($shadowbox_location .'/players/shadowbox-iframe.js');
    }

    drupal_add_js(shadowbox_get_settings(), 'setting');
    drupal_add_js('Shadowbox.init(Drupal.settings.shadowbox);', 'inline', 'footer');
  }
  
  // Special case for the admin settings page test.
  if ($_GET['q'] == 'admin/settings/shadowbox'
    || $_GET['q'] == 'admin/settings/shadowbox/global') {
    drupal_add_css($module_path .'/shadowbox.css');
  }
}

/**
 * Construct the JS settings array.
 *
 * @param $override
 *   An array of settings to override global values.
 *
 * @return
 *   An array containing settings to be used in drupal_add_js.
 */
function shadowbox_get_settings($override = array()) {
  global $language;

  $shadowbox_location = variable_get('shadowbox_location', $shadowbox_path);

  $images = variable_get('shadowbox_supported_images', shadowbox_get_types('image'));
  $swf = variable_get('shadowbox_supported_swf', shadowbox_get_types('swf'));
  $flv = variable_get('shadowbox_supported_flv', shadowbox_get_types('flv'));
  $quicktime = variable_get('shadowbox_supported_quicktime', shadowbox_get_types('quicktime'));
  $wmp = variable_get('shadowbox_supported_wmp', shadowbox_get_types('wmp'));
  $qtwmp = variable_get('shadowbox_supported_qtwmp', shadowbox_get_types('qtwmp'));
  $iframe = variable_get('shadowbox_supported_iframe', shadowbox_get_types('iframe'));

  $image_support = array_filter($images);
  $swf_support = array_filter($swf);
  $flv_support = array_filter($flv);
  $quicktime_support = array_filter($quicktime);
  $wmp_support = array_filter($wmp);
  $qtwmp_support = array_filter($qtwmp);
  $iframe_support = array_filter($iframe);

	$players = array();
	if (!empty($image_support)) {
		$players[] = 'img';
	}
	if (!empty($swf_support)) {
		$players[] = 'swf';
	}
	if (!empty($flv_support)) {
		$players[] = 'flv';
	}
	if (!empty($quicktime_support)) {
		$players[] = 'qt';
	}
	if ((!empty($wmp_support)) || (!empty($qtwmp_support))) {
		$players[] = 'wmp';
	}
	if (!empty($iframe_support)) {
		$players[] = 'html';
		$players[] = 'iframe';
	}

  $settings = array(
    'animate' => variable_get('shadowbox_animate', TRUE),
    'animateFade' => variable_get('shadowbox_animate_fade', TRUE),
    'animSequence' => variable_get('shadowbox_animation_sequence', 'wh'),
    'auto_enable_all_images' => variable_get('shadowbox_auto_enable_all_images', 0),
    'auto_gallery' => variable_get('shadowbox_auto_gallery', 0),
    'autoplayMovies' => variable_get('shadowbox_autoplay_movies', TRUE),
    'continuous' => variable_get('shadowbox_continuous_galleries', FALSE),
    'counterLimit' => variable_get('shadowbox_counter_limit', 10),
    'counterType' => variable_get('shadowbox_counter_type', 'default'),
    'displayCounter' => variable_get('shadowbox_display_counter', TRUE),
    'displayNav' => variable_get('shadowbox_display_nav', TRUE),
    'enableKeys' => variable_get('shadowbox_enable_keys', TRUE),
    'fadeDuration' => variable_get('shadowbox_fade_duration', 0.35),
    'handleOversize' => variable_get('shadowbox_handle_oversize', 'resize'),
    'handleUnsupported' => variable_get('shadowbox_handle_unsupported', 'link'),
    'initialHeight' => variable_get('shadowbox_initial_height', 160),
    'initialWidth' => variable_get('shadowbox_initial_width', 320),
    'language' => $language->language,
    'modal' => !variable_get('shadowbox_overlay_listen', TRUE),
    'overlayColor' => '#'.variable_get('shadowbox_overlay_color', '000'),
    'overlayOpacity' => variable_get('shadowbox_overlay_opacity', 0.8),
		'players' => $players,
    'resizeDuration' => variable_get('shadowbox_resize_duration', 0.55),
    'showMovieControls' => variable_get('shadowbox_show_movie_controls', TRUE),
    'slideshowDelay' => variable_get('shadowbox_slideshow_delay', 0),
    'viewportPadding' => variable_get('shadowbox_viewport_padding', 20),
  );
  $settings = array_merge($settings, $override);
  $settings = array('shadowbox' => $settings);

  return $settings;
}

/**
 * Verify that Shadowbox should be active for the current URL.
 *
 * @return
 *   TRUE if Shadowbox should be active for the current page.
 */
function shadowbox_active() {
  // Special case for the admin settings page test.
  if ($_GET['q'] == 'admin/settings/shadowbox'
    || $_GET['q'] == 'admin/settings/shadowbox/global') {
    return TRUE;
  }

  // If PHP is selected then evaluate it.
  if (variable_get('shadowbox_active_type', 'disable') == 'php') {
    return drupal_eval(variable_get('shadowbox_pages', ''));
  }

  $path = drupal_get_path_alias($_GET['q']);
  $regexp = '/^('. preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'), array('|', '.*', '\1'. preg_quote(variable_get('site_frontpage', 'node'), '/') .'\2'), preg_quote(variable_get('shadowbox_pages', "admin*\nimg_assist*\nnode/add/*\nnode/*/edit"), '/')) .')$/';

  // Compare with the path alias (if one exists).
  $page_match = preg_match($regexp, $path);
  if ($path != $_GET['q']) {
    $page_match = $page_match || preg_match($regexp, $_GET['q']);
  }

  // Latstly, decide whether to include or exclude pages.
  if (variable_get('shadowbox_active_type', 'disable') == 'disable') {
    return !$page_match;
  }
  else {
    return $page_match;
  }
}

function shadowbox_get_imagecache_presets($formatted = FALSE) {
  $presets = array();
  if (function_exists('imagecache_presets')) {
    if ($formatted) {
      foreach (imagecache_presets() as $id => $info) {
        $presets[$id] = $info['presetname'];
      }
    }
    else {
      $presets = imagecache_presets();
    }
  }
  else {
    if ($formatted) {
      foreach (_imagecache_get_presets() as $id => $info) {
        $presets[$id] = $info['presetname'];
      }
    }
    else {
      $presets = _imagecache_get_presets();
    }
  }
  return $presets;
}

/**
 * Helper function to get default values for supported media types.
 *
 * @param $input
 *   The type of supported media options to return.
 *
 * @return
 *   An array with default values for each type.
 */
function shadowbox_get_types($type) {
  switch ($type) {
    case 'image':
      return array('png', 'jpg', 'jpeg', 'gif', 'bmp');
      break;
    case 'swf':
      return array('swf');
      break;
    case 'flv':
      return array('flv', 'mp4', 'mov');
      break;
    case 'quicktime':
      return array('dv', 'mov', 'moov', 'movie', 'mp4');
      break;
    case 'wmp':
      return array('asf', 'wm', 'wmv');
      break;
    case 'qtwmp':
      return array('avi', 'mpg', 'mpeg');
      break;
    case 'iframe':
      return array('asp', 'aspx', 'cgi', 'cfm', 'htm', 'html', 'pdf', 'pl', 'php',
        'php3', 'php4', 'php5', 'phtml', 'rb', 'rhtml', 'shtml', 'txt', 'vbs');
      break;
  }
}

/**
 * Convert numerical value(s) within a delimited string to integer(s).
 *
 * Explode a space delimited string e.g. 'a b 2' and cast numeric string values
 * to integers.
 *
 * @param $string
 *   A space delimited string.
 *
 * @return
 *   An array containing strings and integers.
 */
function _explode_to_int($string) {
  foreach (explode(' ', $string) as $value) {
    $output[] = (is_numeric($value)) ? (int)$value : $value;
  }
  return $output;
}

/**
 * Validate a delimited string of keys and/or keycodes.
 *
 * @param $input
 *   A delimited string of keys and/or keycodes to validate.
 *
 * @return
 *   TRUE if $input is valid otherwise FALSE.
 */
function _validate_keys_string($input) {
  foreach (explode(' ', $input) as $value) {
    $items[] = preg_match('!^(?:[a-z]|\d{1,3})$!i', $value);
  }
  return in_array(FALSE, $items);
}

/**
 * Validate a hex color value.
 *
 * @param $input
 *   The string to validate.
 *
 * @return
 *   TRUE if $input is a valid hex color value (e.g. 000 or 000000)
 */
function _validate_hex_color($input, $long = FALSE) {
  if ($long == TRUE) {
    return preg_match('!^[a-f0-9]{6}$!i', $input);
  }
  else {
    return preg_match('!^[a-f0-9]{3}([a-f0-9]{3})?$!i', $input);
  }
}

/**
 * Filter values that are not strings from an array.
 *
 * @param $array
 *   An array to filter.
 *
 * @return $output
 *   The filtered array.
 */
function _array_to_string_values($array) {
  $output = array();
  foreach ($array as $value) {
    if (is_string($value)) {
      $output[] = $value;
    }
  }
  return $output;
}
